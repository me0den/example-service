// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/me0den/example-service/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// RedisRepo is an autogenerated mock type for the RedisRepo type
type RedisRepo struct {
	mock.Mock
}

// BatchUpdateElo provides a mock function with given fields: ctx, elos
func (_m *RedisRepo) BatchUpdateElo(ctx context.Context, elos []*entity.UserElo) error {
	ret := _m.Called(ctx, elos)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateElo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.UserElo) error); ok {
		r0 = rf(ctx, elos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserElo provides a mock function with given fields: ctx, userID
func (_m *RedisRepo) GetUserElo(ctx context.Context, userID string) (*entity.UserElo, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserElo")
	}

	var r0 *entity.UserElo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.UserElo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.UserElo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserElo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRedisRepo creates a new instance of RedisRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisRepo {
	mock := &RedisRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
